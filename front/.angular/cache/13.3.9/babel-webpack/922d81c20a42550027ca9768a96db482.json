{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport let MaxComponent = /*#__PURE__*/(() => {\n  class MaxComponent {\n    constructor() {}\n\n    ngOnInit() {}\n\n    onSubmit(ngForm) {\n      console.log(ngForm.form.value.weightRm);\n      this.weightRM = ngForm.form.value.weightRm + 1;\n    }\n\n  }\n\n  MaxComponent.ɵfac = function MaxComponent_Factory(t) {\n    return new (t || MaxComponent)();\n  };\n\n  MaxComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MaxComponent,\n    selectors: [[\"app-max\"]],\n    decls: 13,\n    vars: 1,\n    consts: [[1, \"toolTitle\"], [3, \"ngSubmit\"], [\"f\", \"ngForm\"], [\"type\", \"number\", \"name\", \"weightRm\", \"min\", \"1\", \"id\", \"weightRm\", \"placeholder\", \"Enter your weight in kg\", \"ngModel\", \"\", 1, \"form-control\"], [\"id\", \"estimatedRmHelp\", 1, \"form-text\", \"text-muted\"], [\"type\", \"submit\", 1, \"btn\", \"danger\"], [\"id\", \"resultE1RM\", \"type\", \"text\", \"readonly\", \"\", 1, \"inputResult\", 3, \"value\"]],\n    template: function MaxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"p\", 0);\n        i0.ɵɵtext(1, \"One rep max calculator\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 1, 2);\n        i0.ɵɵlistener(\"ngSubmit\", function MaxComponent_Template_form_ngSubmit_2_listener() {\n          i0.ɵɵrestoreView(_r1);\n\n          const _r0 = i0.ɵɵreference(3);\n\n          return ctx.onSubmit(_r0);\n        });\n        i0.ɵɵelementStart(4, \"label\");\n        i0.ɵɵtext(5, \"Load\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"input\", 3);\n        i0.ɵɵelementStart(7, \"small\", 4);\n        i0.ɵɵtext(8, \"This will be the weight to calculate your estimated one rep max\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"button\", 5);\n        i0.ɵɵtext(10, \"Calculate your estimated one rep max\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(11, \"br\")(12, \"input\", 6);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(12);\n        i0.ɵɵpropertyInterpolate(\"value\", ctx.weightRM);\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.NgForm, i1.MinValidator, i1.NumberValueAccessor, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgModel],\n    styles: [\"\"]\n  });\n  return MaxComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}